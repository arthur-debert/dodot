                   Developer Guidelines

This document establishes development standards and practices for dodot.
All contributors must read and follow these guidelines.

Getting Started
---------------

1. Source .envrc for environment variables
2. Install pre-commit hooks: scripts/pre-commit install  
3. Run scripts/test to verify setup
4. Read docs/dev/txxt-primer.txxt for documentation format

Essential Commands
------------------

• scripts/build - Build CLI binary with embedded version
• scripts/test - Run tests with race detection  
• scripts/test-with-cov - Run tests with coverage report
• scripts/lint - Run golangci-lint (auto-installs if needed)
• scripts/pre-commit install - Set up mandatory git hooks

Code Quality Standards
----------------------

Pre-commit Hooks (MANDATORY):
• NO commits allowed to skip scripts/pre-commit
• Automatically runs lint and test on every commit
• Fix all issues before committing

Error Handling Requirements:
• ALL errors MUST have both code and message
• Use DodotError type from pkg/errors
• Test error codes, never error strings:
  assert.Equal(t, errors.TRIGGER_NOT_FOUND, err.Code)

Logging Requirements:  
• Logging MANDATORY for all new code
• Use structured logging with zerolog (see pkg/logging/)
• Default level: WARN, use -v/-vv/-vvv for INFO/DEBUG/TRACE
• Include context fields:
  logger.Debug().Str("pack", packName).Msg("processing pack")

Architecture Guidelines
-----------------------

CLI Layer:
• MUST be Cobra-based and thin
• Business logic belongs in pkg/, not cmd/
• CLI only handles: parsing, validation, calling logic, formatting output

File System Safety:
• NO direct file system operations in dodot code
• ALL operations go through synthfs library
• Benefits: pure/testable code, dry-run capability, rollback support

Type Safety:
• Leverage Go's type system throughout
• Avoid interface{} unless absolutely necessary
• Use constants, not magic strings
• Define types for domain concepts

Package Organization
--------------------

• cmd/dodot/ - CLI entry point (thin Cobra layer)
• pkg/core/ - Core pipeline functions
• pkg/types/ - Type definitions and interfaces
• pkg/triggers/ - Trigger implementations
• pkg/powerups/ - PowerUp implementations  
• pkg/matchers/ - Matcher system
• pkg/logging/ - Centralized logging
• pkg/errors/ - Error types with codes
• pkg/registry/ - Generic registry for extensibility

Development Practices
---------------------

File Organization:
• Use PROJECT_ROOT/tmp/ for all temporary files (never litter repo)
• Clean up after tests
• Use test helpers from pkg/testutil extensively

Testing:
• Prefer table-driven tests for comprehensive coverage
• Each test must be independent (use t.TempDir())
• Minimize E2E tests (slow, flaky)
• Unit tests: *_test.go, Integration: tests/integration/

Documentation:
• ALL docs MUST use txxt format (never Markdown)
• Keep user-facing strings as module-level constants
• Comment WHY, not WHAT

Commit Guidelines
-----------------

Release Work:
Format: "Release X.Y.Z: description"
Example: "Release 3.4.2: implement FileNameTrigger with glob support"

Bug Fixes:
Include "fixes #XX" to auto-close issues
Example: "fixes #42: correct PATH handling in bin powerup"

Pull Requests:
• Create PR as soon as first commit is done
• Keep PRs focused on single feature/fix
• Use gh CLI to verify before merging: gh pr checks

Development Workflow
--------------------

Starting Work:
1. Source .envrc
2. Ensure pre-commit hooks installed
3. Pull latest main branch
4. Create feature branch

During Development:
1. Write tests first (TDD encouraged)
2. Implement with logging  
3. Run scripts/test frequently
4. Run scripts/lint before commit
5. Keep commits focused and atomic

Completing Work:
1. Ensure all tests pass
2. Update relevant documentation
3. Create/update PR
4. Verify CI passes
5. Request review

Key Environment Variables
-------------------------

• PROJECT_ROOT - Repository root
• DOTFILES_TEST_ROOT - Test fixtures location  
• XDG_CONFIG_HOME - Config directory
• DODOT_DATA_DIR - Data files location

Security Considerations
-----------------------

• Validate all user input and file paths
• Check directory traversal attempts
• Verify pack ownership and permissions
• Use secure temp file creation
• Validate symlink targets

Performance Guidelines
----------------------

• Profile before optimizing
• Batch operations where possible
• Use goroutines for independent pack processing
• Handle graceful shutdown with context cancellation

This document provides the essential guidelines. See individual package
documentation for implementation details.