                   CLI Architecture

This document describes the design and implementation of dodot's command-line
interface layer.

Design Principles
-----------------

The CLI layer follows these core principles:

1. **Thin CLI Layer**: The cmd/dodot package only handles CLI concerns:
   • Command parsing and validation (via Cobra)
   • Help text and user messages
   • Output formatting and display
   
   Business logic lives in pkg/, not cmd/.

2. **Type-Safe Communication**: Commands are Go functions that:
   • Accept typed parameters
   • Return structured data
   • Never print directly to stdout

3. **Maximize Cobra Usage**: Use Cobra's features out-of-the-box:
   • Built-in command structure
   • Flag and argument parsing
   • Help generation
   • Validation framework
   
   Avoid reinventing what Cobra provides.

4. **Separate Build Tools**: Meta-commands live in separate binaries:
   • cmd/dodot-completions for shell completions
   • cmd/dodot-manpage for man page generation
   
   This keeps the main CLI focused on user commands.

Message Management
------------------

All user-facing text is centralized for easy maintenance:

Structure:
• Single-line messages: Constants in cmd/dodot/msgs.go
• Multi-line content: Files in cmd/dodot/msgs/*.txt
• Embedded at compile time using Go's embed package

Benefits:
• Non-technical contributors can edit messages safely
• Compile-time validation catches errors
• No runtime string construction bugs
• Easy to review all user-facing text

Example:
```go
// msgs.go
const msgPackNotFound = "pack not found: %s"

//go:embed msgs/link-long.txt
var linkLongHelp string
```

Help System
-----------

dodot extends Cobra's help with a topics system:
• `dodot help <topic>` for concept documentation
• Topics stored as files in cmd/dodot/topics/
• Supports .txt, .txxt, and .md formats
• Option topics use "option-" prefix

See 30_help-system.txxt for implementation details.

Command Structure
-----------------

Each command follows this pattern:

```go
// CLI layer (cmd/dodot/link.go)
var linkCmd = &cobra.Command{
    Use:   "link [pack...]",
    Short: "Link pack configurations",
    Long:  linkLongHelp, // From embedded file
    RunE: func(cmd *cobra.Command, args []string) error {
        // 1. Parse flags and arguments
        dryRun, _ := cmd.Flags().GetBool("dry-run")
        
        // 2. Call business logic
        result, err := link.Execute(args, link.Options{
            DryRun: dryRun,
        })
        
        // 3. Format output
        return display.FormatResult(result)
    },
}

// Business logic (pkg/commands/link/link.go)
func Execute(packs []string, opts Options) (*Result, error) {
    // Pure business logic, no CLI concerns
}
```

Output Formatting
-----------------

dodot uses a unified output system that provides consistent rendering across all commands:

Architecture:
• **Structured Data**: Commands return CommandResult with optional message and pack status
• **Renderer Interface**: Common interface implemented by format-specific renderers
• **Multiple Formats**: Terminal (rich), text (plain), and JSON output supported
• **Format Detection**: Automatic selection based on terminal capabilities and environment

Key Components:
• **pkg/types/results.go**: Core data types (CommandResult, DisplayResult)
• **pkg/ui/ui.go**: Renderer interface and factory
• **pkg/ui/terminal/**: Rich terminal output with colors
• **pkg/ui/text/**: Plain text output for pipes/non-terminals
• **pkg/ui/json/**: Structured JSON for programmatic access

Unified Pack Representation:
All pack-related commands show the same status format:
1. Optional message describing the action taken
2. Pack status showing all managed files and their states

Benefits:
• Consistent output format across all commands
• Predictable user experience
• Support for different output contexts (terminal, pipe, automation)
• Clean separation of command logic from presentation

See docs/guides/70_cli-output.txxt for detailed implementation guide.

Testing the CLI
---------------

CLI tests focus on:
• Command parsing and validation
• Flag handling
• Help text generation
• Output formatting

Business logic tests live with the pkg/ code.

Future Improvements
-------------------

• Interactive mode for command discovery
• Shell-specific completion enhancements
• Contextual help based on current state
• Richer output formats (JSON, YAML)
