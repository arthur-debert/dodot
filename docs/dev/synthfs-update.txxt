Title: Filesystem Execution with `go-synthfs` Simple API

## 1. Overview

dodot's filesystem operations are powered by the `go-synthfs` library, specifically its "Simple API." This approach simplifies our internal code, improves robustness, and makes working with filesystem side effects more intuitive.

The primary benefits of this architecture are:
- **Reduced Complexity:** It eliminates the need for manual operation conversion, custom item types, and complex pipeline management within our executor code.
- **Improved Readability:** The code uses a high-level, declarative API for filesystem operations instead of low-level, imperative logic.
- **Enhanced Robustness:** It leverages the library's built-in dependency resolution (e.g., creating directories before files), error handling, and path management, reducing the surface area for bugs in our code.

## 2. Core Implementation

The implementation is centered on the `SynthfsExecutor` and the `CombinedExecutor`.

### 2.1. `SynthfsExecutor`

The `SynthfsExecutor` is responsible for executing all core filesystem operations (creating files, directories, and symlinks).

Its implementation uses the `synthfs.SimpleBatch` API to collect and execute these operations. The `ExecuteOperations` method:
    1. Creates a new `SimpleBatch`.
    2. Iterates through dodot's planned `Operations`.
    3. Calls application-level safety checks (e.g., `validateSafePath`).
    4. Adds the corresponding task to the batch using high-level methods (e.g., `batch.CreateDir()`, `batch.WriteFile()`).
    5. Executes the entire batch, letting `go-synthfs` handle the dependencies and execution order.

### 2.2. `CombinedExecutor`

The `CombinedExecutor` orchestrates the overall execution flow, which involves both filesystem operations and shell commands (e.g., for the `install` power-up).

It streamlines this process by:
1.  Grouping all filesystem-related `Operations` into a single slice.
2.  Passing this slice to the `SynthfsExecutor` to be executed in one batch.
3.  Executing any shell command `Operations` separately, after the filesystem changes are complete.
4.  Handling any subsequent filesystem operations, such as writing "sentinel files" to track that a command has been run.

This approach leverages the power of `go-synthfs` for filesystem tasks while maintaining application-specific logic for command execution order.

## 3. Development Guidelines

When working with filesystem operations in dodot, follow these guidelines:

1.  **Use the `SimpleBatch` API:** For any sequence of filesystem operations, use `synthfs.NewSimpleBatch(fs)` to collect them. This ensures that dependencies are handled correctly.

2.  **Preserve Safety Checks:** Application-specific safety checks, such as `validateNotSystemFile` and `validateSafePath`, must be preserved. They should be called *before* adding an operation to a batch.

3.  **Rely on `synthfs` for Path Handling:** Avoid manual path manipulation. `go-synthfs` handles path resolution automatically. All paths passed to the library should be absolute.

4.  **Handle `force` Mode Correctly:** The `force` mode is handled by passing the appropriate options to `go-synthfs` methods, which manage overwriting existing files or symlinks gracefully.
