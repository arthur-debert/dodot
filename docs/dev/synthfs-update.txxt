Title: Refactoring `pkg/synthfs` with the new `go-synthfs` Simple API

## 1. Overview

The `go-synthfs` library has released a new "Simple API" that will significantly simplify our filesystem operations, address team feedback about complexity, and improve the robustness of our code. This document outlines the plan and guidelines for migrating our `pkg/synthfs` implementation to this new API.

The primary benefits of this migration are:
- **Reduced Complexity:** Eliminates the vast majority of boilerplate code currently in `pkg/synthfs/synthfs_executor.go`, including manual operation conversion, custom item types, and pipeline management.
- **Improved Readability:** Replaces low-level, imperative operation building with a high-level, declarative API.
- **Enhanced Robustness:** Leverages the library's built-in dependency resolution, error handling, and path management, reducing the surface area for bugs in our code.
- **Better Developer Experience:** Makes working with filesystem side effects simpler and more intuitive, aligning with our original goals for adopting `synthfs`.

## 2. Proposed Changes

The refactoring will focus on two main areas: the `SynthfsExecutor` and the `CombinedExecutor`.

### 2.1. `SynthfsExecutor` Refactoring

The current `SynthfsExecutor` will be almost completely rewritten. The core responsibility of converting `dodot` operations into `synthfs` operations will be replaced by direct calls to the new API.

**Key Changes:**
- **Eliminate `convertToSynthfsOperation`:** The entire switch statement and its helper functions (`convertCreateDir`, `convertWriteFile`, etc.) will be removed.
- **Adopt `SimpleBatch`:** We will use the `synthfs.SimpleBatch` API to collect and execute filesystem operations.
- **Remove Custom Item Structs:** The `fileItem`, `directoryItem`, and `symlinkItem` structs will no longer be needed.
- **Simplify `ExecuteOperations`:** This method will be simplified to:
    1. Create a new `SimpleBatch`.
    2. Iterate through `dodot` operations and add them to the batch using the new high-level methods (e.g., `batch.CreateDir()`, `batch.WriteFile()`).
    3. Execute the batch.

### 2.2. `CombinedExecutor` Refactoring

The `CombinedExecutor`'s manual, multi-stage execution logic will be streamlined.

**Key Changes:**
- **Remove Manual Operation Grouping:** The logic for separating operations into `dirOps`, `executeOps`, `fileOps`, etc., will be removed.
- **Leverage Batch Dependency Management:** Filesystem operations will be added to a single `SimpleBatch`, and `synthfs` will handle the dependency resolution (e.g., creating directories before files within them).
- **Clarify Command Execution Flow:** The execution flow will be simplified to:
    1. Prepare a `SimpleBatch` for all filesystem operations.
    2. Execute the batch.
    3. Execute any shell command operations.
    4. If necessary for cases like "sentinel files," a second, smaller batch can be executed after the commands. This is still a major improvement over the current implementation.

## 3. Refactoring Guidelines

To ensure a smooth and consistent migration, please follow these guidelines:

1.  **Use the `SimpleBatch` API:** For any sequence of more than one filesystem operation, use `synthfs.NewSimpleBatch(fs)` to collect operations. For single operations, direct function calls (e.g., `synthfs.WriteFile(...)`) are acceptable but using a batch is preferred for consistency.

2.  **Preserve Safety Checks:** Our application-specific safety checks, such as `validateNotSystemFile` and `validateSafePath`, must be preserved. These should be called *before* adding an operation to the batch.

3.  **Update Path Handling:** Remove all manual path manipulation (`filepath.Rel`) and rely on `synthfs`'s automatic path resolution. Ensure that all paths passed to `synthfs` are absolute paths as they are in the current implementation.

4.  **Handle `force` Mode Correctly:** The current crude implementation of `force` mode (pre-deleting files) should be replaced. The new API may offer a more elegant way to handle overwrites. The `SimpleBatch` API should be checked for an "overwrite" or "force" option.

5.  **Refactor in Place:** The changes should be made directly within the existing `pkg/synthfs` files. The goal is to replace the implementation, not the package's public API.

6.  **Update Tests:** All tests in `pkg/synthfs` must be updated to reflect the new implementation. The tests should be simpler to write, as they will no longer need to mock the low-level `synthfs` pipeline components.

## 4. Incremental Refactoring Plan

To avoid a single, large, and risky commit, the refactoring will be performed in two distinct phases. This approach allows for easier code review and ensures the system remains in a testable state at each step.

### Commit 1: Refactor `SynthfsExecutor` Internals

**Goal:** Replace the internal implementation of `SynthfsExecutor` to use the new `SimpleBatch` API, without changing its public methods.

1.  **Modify `SynthfsExecutor.ExecuteOperations`:**
    *   Rewrite the method to use `synthfs.SimpleBatch`. It will iterate through `dodot` operations and add them to the batch using the new high-level methods.
    *   Preserve existing application-level safety checks (`validateSafePath`, `validateNotSystemFile`) by calling them *before* adding an operation to the batch.
2.  **Delete Dead Code:**
    *   Remove the `convertToSynthfsOperation` function and all its helpers (`convertCreateDir`, etc.).
    *   Remove the `fileItem`, `directoryItem`, and `symlinkItem` structs.
3.  **Update Tests:**
    *   Update the unit and integration tests for `SynthfsExecutor` to reflect the new implementation.

**Outcome:** The core filesystem execution logic is modernized, but its interface remains unchanged, ensuring no impact on the rest of the application.

### Commit 2: Simplify `CombinedExecutor`

**Goal:** Refactor the `CombinedExecutor` to leverage the dependency management of the newly refactored `SynthfsExecutor`.

1.  **Modify `CombinedExecutor.ExecuteOperations`:**
    *   Remove the manual grouping of filesystem operations (e.g., `dirOps`, `otherOps`).
    *   Combine all filesystem operations into a single slice and pass them to `synthfsExecutor.ExecuteOperations` in one call.
2.  **Preserve Application Logic:**
    *   The explicit ordering for shell commands (`executeOps`) and sentinel file writes relative to the filesystem operations will be maintained, as this is application-specific logic.
3.  **Update Tests:**
    *   Update the tests for `CombinedExecutor` to reflect its simpler, more streamlined logic.

**Outcome:** The orchestration logic is simplified, demonstrating the benefits of the new `synthfs` API and completing the refactor.
