Developer Guide
==============

This guide covers essential information for contributing to dodot.

## Setup

Prerequisites: Go 1.23+, Git, Unix-like environment

1. **ALL errors need codes** for stable testing:
2. **Logging is MANDATORY** for new code, see pkg/logging/
3. **Pre-commit hooks are MANDATORY** - No exceptions
4. **Documentation uses txxt format** - Not Markdown

## Architecture Principles

- **Thin CLI layer**: Business logic in `pkg/`, not `cmd/`
- **Pure functions**: Handlers must be stateless
- **Type safety**: No interface{}, use constants
- **Return structured data**: Let CLI layer format output, no direct printing
  to stdout

## Testing

- Table-driven tests preferred
- Use testutil helpers

## Package Structure

```
cmd/dodot/         # Thin CLI layer (Cobra)
pkg/
├── core/          # Core pipeline (GetPacks, GetFiringTriggers, etc.)
├── handlers/      # Action generators
├── triggers/      # File matchers
├── types/         # Type definitions
├── errors/        # Error codes and types
├── logging/       # Structured logging
└── testutil/      # Test helpers
```

## Development Workflow

1. Create feature branch, if working on a gh issue, use $gh issue develop -c
   <issue> to get the branch
2. Write tests first (TDD encouraged)
3. Implement feature
4. Run `scripts/test` and `scripts/lint`
5. Commit with clear message, if working on a gh issue, refer asin for #<issue>
   or closes: <issue>
6. For releases: "Release X.Y.Z: description" commit prefix
7. When done, write the pr for the branch, also referencing the for or closes
   #issue.
8. Verify , through the gh cli that the branch's check pass or anything broke.

## Use provided tools for common neeeds

- scripts/build              # Build binary to ./bin/dodot
- scripts/test              # Run tests with race detection
- scripts/go-coverage     # Generate coverage report
- scripts/lint              # Run golangci-lint
- scrpts/go-inner-deps <pkg> # for checking dependency graph for refactors

- single test: go test -v -run TestFunctionName ./pkg/...
- logging: ./bin/dodot -vvv status   # TRACE level logging, can use -v or -vv, also in
  tests
- releasing: scripts/release-new --patch  --yes# Bump version
```

## Key Dependencies

- `spf13/cobra` - CLI framework
- `rs/zerolog` - Structured logging
- `knadh/koanf` - Configuration management

## Quick Reference

- Error codes: `pkg/errors/codes.go`
- Logging levels: WARN (default), INFO (-v), DEBUG (-vv), TRACE (-vvv)
- Test utilities: `pkg/testutil/`
- User messages: `cmd/dodot/msgs.go`

See `txxt-primer.txxt` for documentation format.
