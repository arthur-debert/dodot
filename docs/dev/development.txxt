Developer Guide
==============

This guide covers essential information for contributing to dodot.

## Setup

Prerequisites: Go 1.23+, Git, Unix-like environment

```bash
git clone https://github.com/untitled-dotfiles/dodot.git
cd dodot
source .envrc                    # Sets up environment
scripts/pre-commit install       # MANDATORY - installs git hooks
scripts/build                    # Builds ./bin/dodot
scripts/test                     # Runs tests with race detection
```

## Critical Rules

1. **NO direct filesystem operations** - Always use synthfs:
   ```go
   // WRONG
   os.ReadFile(path)
   
   // RIGHT
   fs := synthfs.GetInstance()
   fs.ReadFile(path)
   ```

2. **ALL errors need codes** for stable testing:
   ```go
   // WRONG
   return fmt.Errorf("pack not found: %s", name)
   
   // RIGHT
   return errors.New(errors.ErrPackNotFound, "pack not found: vim")
   ```

3. **Logging is MANDATORY** for new code:
   ```go
   logger := logging.GetLogger("component.name")
   logger.Debug("processing file", "path", path)
   ```
   **CRITICAL**: Never log in init() functions

4. **Pre-commit hooks are MANDATORY** - No exceptions

5. **Documentation uses txxt format** - Not Markdown

## Architecture Principles

- **Thin CLI layer**: Business logic in `pkg/`, not `cmd/`
- **Pure functions**: Handlers must be stateless
- **Type safety**: No interface{}, use constants
- **Return structured data**: Let CLI layer format output

## Testing

```go
// Table-driven tests preferred
tests := []struct {
    name     string
    input    string
    wantErr  errors.ErrorCode  // Test codes, not messages
}{
    {"valid", "input", ""},
    {"invalid", "", errors.ErrInvalidInput},
}

// Use testutil helpers
testutil.SetupTest(t)
```

## Package Structure

```
cmd/dodot/         # Thin CLI layer (Cobra)
pkg/
├── core/          # Core pipeline (GetPacks, GetFiringTriggers, etc.)
├── handlers/      # Action generators
├── triggers/      # File matchers
├── types/         # Type definitions
├── errors/        # Error codes and types
├── logging/       # Structured logging
└── testutil/      # Test helpers
```

## Development Workflow

1. Create feature branch
2. Write tests first (TDD encouraged)
3. Implement feature
4. Run `scripts/test` and `scripts/lint`
5. Commit with clear message
6. For releases: "Release X.Y.Z: description" commit prefix

## Common Commands

```bash
# Development
scripts/build              # Build binary to ./bin/dodot
scripts/test              # Run tests with race detection
scripts/test-with-cov     # Generate coverage report
scripts/lint              # Run golangci-lint

# Testing single function
go test -v -run TestFunctionName ./pkg/...

# Verbose logging
./bin/dodot -vvv status   # TRACE level logging

# Release
scripts/release-new --patch  # Bump version
```

## Key Dependencies

- `spf13/cobra` - CLI framework
- `rs/zerolog` - Structured logging
- `arthur-debert/go-synthfs` - Safe filesystem operations
- `knadh/koanf` - Configuration management

## Quick Reference

- Error codes: `pkg/errors/codes.go`
- Logging levels: WARN (default), INFO (-v), DEBUG (-vv), TRACE (-vvv)
- Test utilities: `pkg/testutil/`
- User messages: `cmd/dodot/msgs.go`

See `txxt-primer.txxt` for documentation format.