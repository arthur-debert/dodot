We have done quite a bit work on the cli layer for dodot. 

1. CLI Guidelines

    The cli in `cmd/dodot` has a few design guidelines.

    1.1. The cmd Mode is About the ClI

        The way this works is that each command is a regular golang funciona
        that receives go types and returns go types. Like the rest of the code,
        this is pkg.

        The code in cmd/dodot is only the cli interface aspect: 

            - Command line parsing : sub commands options and arguments and
              validation. This is handled by the cobra lib.
            - Text and help content for the cli.
            - Rendering the output of commands core since these return regular
              golang types not print to std out.


    1.2. As Much as Cobra as Possible. 

            Cobra is a great, well tested and robust library feature full. In order to have : a better working cli, less code to debug and maintain, a standard interaction that users expects for commands we should use cobra as much as possible. Ideally just out-of-the box. If that is not the case, using cobra config, if that is not the case a different cobra template.

    1.3. No Meta Helper Generation Commands.

            Cobra handles things like manpage generation and shell completions which is great. But it's not ideal to have these exposed as the main program's sub commands as these are not needed by users, only by the internal tools (like the build and release workflow). 

            There fore these are available in specialized binaries, like cmd/<app>-completions and cmd/<app>-manpage . This makes the main binary help output cleaner and avoids the complexity of handling / managing meta internal tools like this for the end user. 

    1.4. Easy to iterate and fine tune the user experience

        All copy, that is the text messages of the CLI are centralized into cmd/<app>/msgs.go, allowing editors to tune, test and ship them without the cost and risk of searching around and altering various go files with actual code.

        Single line messages are constants in the msgs.go file.
        Multi-line strings are kept in dedicated txt files in
        cmd/<app>msgs/<name>.<ext> and embedded in msgs.go, allowing complex content, without the risk of breaking the code or making the cli code hard to read and navigate.

        This allows editing these changes much easier since: 

            - They are all accessible in two designated spaces (the
              msgs.go or the cmd/<program>msgs dirs with hold the
              longer messages as txt)
            - Safer:  everyone can edit the trickier longer messages without risk of no compiling or more insidious bugs.
            - Simpler binary failures on changes: since all copy is
              a string constant, any issues will make the parser
              fail the msgs.go file giving you a very clear fix
              path, no subtle bugs, either compiles or not.

        This is about ease of reading , changing the messages and how to make it simple specially for less technical users.

2. Features

    The cli features the ux and features that most users came to expect of
    well crafted modern tools, including exploring the cli and help
    interactively, neatly  named sub commands  and clear and documented
    options.

    Additionally, the dodot cli has the cobra/topics features which: 
       - Exposes a  $ dodot help <topic> command so that the cli can educate users about topics that are not a command descriptions and for options.
       - In the same spirit as the msgs.go, these topics are not
         hardcoded multi line strings intermingled with code, but txt or md or txxt stand-alone files, making much easier for all users, technical or not, to alter them.
