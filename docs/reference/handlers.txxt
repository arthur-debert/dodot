# Handlers Guide

Handlers are operation generators in dodot that process matched files and convert them
into simple operations (CreateDataLink, CreateUserLink, RunCommand). Each handler serves 
a specific purpose in managing your dotfiles.

## Available Handlers

dodot includes several built-in handlers, each with comprehensive documentation in
their respective packages. For detailed end-to-end documentation of each handler,
including examples, configuration, and best practices, see:

### Core Handlers

1. **SymlinkHandler** (`symlink`)
   - Creates symlinks from dotfiles to target locations
   - See: `pkg/handlers/lib/symlink/doc.go`
   - Use for: Configuration files, dotfiles

2. **InstallHandler** (`install`)
   - Executes shell scripts for one-time setup
   - See: `pkg/handlers/lib/install/doc.go`
   - Use for: Installing tools, initial setup

3. **HomebrewHandler** (`homebrew`)
   - Processes Brewfiles to manage Homebrew packages
   - See: `pkg/handlers/lib/homebrew/doc.go`
   - Use for: System packages, GUI apps (macOS)

4. **ShellProfileHandler** (`shell`)
   - Sources shell scripts into your environment
   - See: `pkg/handlers/lib/shell/doc.go`
   - Use for: Aliases, functions, shell customization

5. **PathHandler** (`path`)
   - Adds directories to system PATH
   - See: `pkg/handlers/lib/path/doc.go`
   - Use for: Personal scripts, tools directories




## Handler Categories

Handlers are divided into two categories based on their operation types:

### Code Execution Handlers (provisioning)
- Generate **RunCommand** operations with sentinels
- Install Handler: Runs setup scripts once
- Homebrew Handler: Installs packages once
- Operations are tracked to prevent re-execution
- Run by default with `dodot up`, skip with `--no-provision`

### Configuration Handlers (always run)
- Generate **CreateDataLink** and **CreateUserLink** operations
- Symlink Handler: Creates configuration symlinks
- Path Handler: Manages PATH entries
- Shell Handler: Sources shell configuration
- Operations are idempotent (safe to run multiple times)
- Always run with `dodot up`

## Quick Reference

| Handler | Category | Operations | Purpose |
|---------|----------|------------|---------|
| symlink | Configuration | CreateDataLink + CreateUserLink | Link configs to home |
| install | Code Execution | RunCommand | Run setup scripts once |
| homebrew | Code Execution | RunCommand | Install packages once |
| shell | Configuration | CreateDataLink | Source shell configs |
| path | Configuration | CreateDataLink | Manage PATH entries |

## Handler Documentation Structure

Each handler's doc.go file contains:

1. **Overview**: What the handler does
2. **When It Runs**: Configuration vs Provisioning category
3. **Standard Configuration**: Example rule configs
4. **File Selection Process**: How files are matched
5. **Execution Strategy**: How it works internally
6. **Storage Locations**: Where files are stored
7. **Effects on User Environment**: What changes are made
8. **Options**: Configuration options
9. **Example End-to-End Flow**: Complete usage example
10. **Error Handling**: Common errors and solutions
11. **Best Practices**: Usage recommendations
12. **Comparison**: When to use vs other handlers

## Creating Custom Handlers

While dodot includes comprehensive built-in handlers, you can create custom ones:

1. Implement the `operations.Handler` interface (just ~50-100 lines!)
2. Add handler creation in `pkg/rules/integration.go`
3. Implement `ToOperations()` to convert matches to operations
4. Add rules to your configuration

Handlers are now simple data transformers - they just declare what operations
they need, not how to perform them. See `pkg/operations/types.go` for the 
interface definition.

## Best Practices

1. **Read the doc.go files**: Each handler has extensive documentation
2. **Use the right tool**: Each handler has a specific purpose
3. **Check run modes**: Understand when handlers execute
4. **Test with --dry-run**: Preview changes before applying
5. **Organize by pack**: Group related configurations
6. **Use standard patterns**: Follow naming conventions

## Troubleshooting

- **Not running?** Check rule patterns and priorities
- **Errors?** Each doc.go lists common error codes
- **Wrong phase?** Verify handler category (Configuration vs Code Execution)
- **Conflicts?** Use --force flag when appropriate

For comprehensive details on any handler, read its doc.go file in the
pkg/handlers/<name>/ directory.