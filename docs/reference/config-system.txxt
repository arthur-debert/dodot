                        CONFIGURATION SYSTEM
                        


1. Overview

       dodot has two configuration parts: internal and user facing. Both are
       represented as TOML documents.  We'll differentiate them by using; 

        - app defaults: internal settings.
        - configuration: the parts that are user facing, store in dodot.toml
          (or .dodot.toml)
          files.


       The config has three layers, the pack layer, the root layer and the app
       layer
        The latter two are optional, and can be present simultaneously. Keys in
        upper layers override keys in the lower ones, as they are merged.

        
2. Configuration Hierarchy

    Configuration is loaded and merged in this order (later sources override earlier):
    
        1. *App Defaults* - embedded defaults.toml 
        2. *APP Config* - embedded user-defaults.toml (change to dodot.toml)
        3. *Root config* - $DOTFILES_ROOT/.dodot.toml
        4. *Pack config* - $DOTFILES_ROOT/<pack>/.dodot.toml
        (ps remove env variables except for $DOTFILES_ROOT)
    
    
    2.1 Merge Rules
    
        Values are merged according to their type:
        
            - *Arrays*: Append (values accumulate)
            - *Scalars*: Override (last value wins)
            - *Maps*: Deep merge recursively
        
        Should be done through the koanf library
        

3. Configuration Files

    All configuration files use the same TOML format with these sections:
    
    
    # This is the config file for dodot, at their default values.
    # these can be used in $dotfiles_root, in which case will be applied to all packs.
    # or inside packs in which case will be applied only to that pack.
    # when both are present, the pack config will override the root config for 
    # shared keys

    # these filenames will be ignored, that is not symlinked or processed
    # unless explicitly included in the mapping section.
    [pack]
    ignore = [
        ".git",
        ".svn",
        ".hg",
        "node_modules",
        ".ds_store",
        "*.swp",
        "*~",
        "#*#",
        ".env*",
        ".terraform/"
    ]

    # dodot respects the users xdg config_home. however, these software bellow do not
    # config files for these (as in .ssh , .gnupg, .aws, etc) will be symlinked to $home
    [symlink]
    force_home = [
        "ssh",        # .ssh/ - security critical
        "aws",        # .aws/ - credentials
        "kube",       # .kube/ - kubernetes config
        "bashrc",     # .bashrc - shell expects in $home
        "zshrc",      # .zshrc - shell expects in $home
        "profile"     # .profile - shell expects in $home
    ]

    # these are files that won't be symlink as often they are present by mistake, 
    # for security reeasons. you can remove them from this list if you want 
    # to symlink them.
    protected_paths = [
        ".ssh/authorized_keys",
        ".ssh/id_rsa",
        ".ssh/id_ed25519",
        ".gnupg",
        ".password-store",
        ".config/gh/hosts.yml",
        ".aws/credentials",
        ".kube/config",
        ".docker/config.json"
    ]

    # these are the file name mappings inside packs. thse will overwrite dodot's 
    # default mappings. they are valid for both directories and files and * patterns 
    # are supported. can be an array of strings or a single string.
    [mappings]
    path = "bin"
    install = "install.sh"
    shell = ["aliases.sh", "profile.sh", "login.sh"]
    homebrew = "brewfile"
    # files to ignore during pack processing (in addition to dodot's defaults)
    # examples: [".env.local", "secrets.json", "private/*", "*.key"]
    ignore = []
