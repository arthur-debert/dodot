            Shell Integration Design


This document describes how dodot integrates with user shells to provide
seamless dotfiles functionality including PATH management, aliases, environment
variables, and other shell configurations.


1. Overview

    dodot's shell integration follows the same principles as the rest of the
    system: stateless, symlink-based, and live. All shell-related deployments
    are managed through a central data directory that maintains symlinks to
    the actual configuration files in the user's dotfiles repository.

    The key insight is that we use a double-symlink approach:
    - User's shell sources dodot's init script
    - dodot's deployed directory contains symlinks to pack files
    - This allows easy tracking of what's deployed via `dodot status`


2. Directory Structure

    dodot uses the XDG Base Directory specification for its data directory:

        DODOT_DATA_DIR=${XDG_DATA_HOME:-$HOME/.local/share}/dodot

    The directory structure is:

        $DODOT_DATA_DIR/
        ├── deployed/
        │   ├── shell_profile/      # alias.sh, env.sh files
        │   │   ├── ssh.sh -> $DOTFILES_ROOT/ssh/alias.sh
        │   │   └── python.sh -> $DOTFILES_ROOT/python/env.sh
        │   ├── path/               # bin directories  
        │   │   ├── ssh -> $DOTFILES_ROOT/ssh/bin
        │   │   └── tools -> $DOTFILES_ROOT/tools/bin
        │   ├── shell_source/       # other sourced files
        │   │   └── completions.sh -> $DOTFILES_ROOT/zsh/completions.sh
        │   └── symlink/            # regular file symlinks
        │       ├── .vimrc -> $DOTFILES_ROOT/vim/.vimrc
        │       └── .gitconfig -> $DOTFILES_ROOT/git/.gitconfig
        └── shell/
            └── dodot-init.sh      # Main shell integration script


3. Shell Integration Script

    The dodot-init.sh script is the single entry point for shell integration.
    Users add one line to their shell configuration:

        # In ~/.zshrc, ~/.bashrc, or similar
        [ -f "$HOME/.local/share/dodot/shell/dodot-init.sh" ] && \
            source "$HOME/.local/share/dodot/shell/dodot-init.sh"

    This script handles:
    - Sourcing all shell profile scripts
    - Adding directories to PATH
    - Sourcing additional shell files


4. Double Symlink Approach

    For all deployments, dodot uses a double-symlink approach:

        ~/.vimrc -> $DODOT_DATA_DIR/deployed/symlink/.vimrc -> $DOTFILES_ROOT/vim/.vimrc

    Benefits:
    - `dodot status` can easily list all deployed items by scanning deployed/
    - Undeployment is clean - just remove links from deployed/
    - No need to track deployment state separately
    - Debugging is easier - can see all deployments in one place


5. Shell Power-ups Integration

    5.1 Shell Profile Power-up
        - Triggered by: alias.sh, env.sh, functions.sh files
        - Creates symlinks in: deployed/shell_profile/
        - Naming: <pack-name>.sh -> <pack-path>/<file>
        - Sourced by: dodot-init.sh on shell startup

    5.2 Shell Add Path Power-up  
        - Triggered by: bin/ directories in packs
        - Creates symlinks in: deployed/path/
        - Naming: <pack-name> -> <pack-path>/bin
        - Added to PATH by: dodot-init.sh

    5.3 Shell Source Power-up
        - Triggered by: Other shell files needing sourcing
        - Creates symlinks in: deployed/shell_source/
        - Naming: <pack-name>-<file>.sh -> <pack-path>/<file>
        - Sourced by: dodot-init.sh


6. Naming Conventions

    To avoid conflicts when multiple packs have files with the same name:
    
    - Shell profile files: <pack-name>.sh
    - Path directories: <pack-name>
    - Shell source files: <pack-name>-<original-filename>
    - Symlink files: preserve original name (conflicts handled by target dir)


7. Order of Operations

    The dodot-init.sh script sources/adds in this order:

    1. All shell_profile scripts (alphabetically)
    2. All path directories (prepended to PATH) 
    3. All shell_source scripts (alphabetically)

    This ensures predictable behavior and allows packs to depend on each other.


8. Shell Detection

    dodot detects the user's shell via:
    1. The --shell flag if provided
    2. The SHELL environment variable
    3. The parent process name
    4. Default to bash if detection fails

    Supported shells: bash, zsh, fish, ksh, tcsh


9. Error Handling

    The shell integration is designed to be resilient:
    
    - Missing symlink targets are silently skipped
    - Broken symlinks don't break shell startup
    - Each sourced file is checked before sourcing
    - Errors are logged but don't stop processing


10. Undeployment

    Undeploying is simple:
    1. Remove symlinks from deployed/ subdirectories
    2. Remove top-level symlinks (e.g., ~/.vimrc)
    3. No shell configuration changes needed
    4. Next shell startup will reflect changes