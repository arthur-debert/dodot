
1. Core Design 


    1. Git-based versioning - No internal versioning, relies entirely on git
    2. Live deployment via symlinks - Files in source control ARE the deployed files (no
    copying/syncing)
    3. Stateless operation - No tracking of what's installed, simplifying the system
    4. User freedom - Users organize dotfiles in "packs" (directories) as they wish
    5. Simple operation - One main command: dodot deploy


2.Architecture Components

    The design covers the main architectural pieces well:

    1. Packs System
        - Directories under $DOTFILES_ROOT containing related configs
        - File naming conventions trigger behaviors (e.g., bin/ dirs added to PATH, alias.sh
        sourced)
        - Optional .dodot.toml for customization
    2. Power-ups, Triggers, and Matchers
        - Power-ups: Actions dodot can perform (add to PATH, link files, etc.)
        - Triggers: Conditions that activate power-ups (file presence)
        - Matchers: Configuration linking triggers to power-ups
        - Clean separation of concerns
    3. Action System
        - Power-ups return high-level action descriptions
        - Actions translated to low-level file operations
        - No direct filesystem manipulation by power-ups
    4. Synthfs Integration
        - External library handling actual filesystem operations
        - Enables pure functional design and testing
        - Isolates risky filesystem operations

