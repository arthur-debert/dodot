dodot Configuration YAML Proposal
================================

This document proposes the YAML configuration structure for dodot Phase 2.

## File Locations and Names

### Default Configuration (Embedded)
The default configuration will be embedded in the binary at:
- `configs/default.yaml` - Full default configuration

### User Configuration Options
Users can customize dodot by placing configuration files in these locations (in order of precedence):
1. `$DOTFILES_ROOT/.dodot/config.yaml` - Repository-specific config
2. `$XDG_CONFIG_HOME/dodot/config.yaml` - User-specific config
3. `~/.config/dodot/config.yaml` - Fallback user config

### Configuration Loading Order
1. Embedded default configuration (always loaded first)
2. User configuration files (loaded in precedence order)
3. Environment variable overrides (highest precedence)

## YAML Structure

The YAML structure mirrors the Go configuration structs for clarity:

```yaml
# dodot configuration file
# This file customizes dodot's behavior

# Security settings control how dodot handles sensitive files
security:
  # Files/paths that should never be symlinked for security reasons
  protectedPaths:
    - .ssh/authorized_keys
    - .ssh/id_rsa
    - .ssh/id_ed25519
    - .gnupg
    - .password-store
    - .config/gh/hosts.yml
    - .aws/credentials
    - .kube/config
    - .docker/config.json
  

# Patterns control what files dodot processes
patterns:
  # Files/directories to ignore when scanning packs
  packIgnore:
    - .git
    - .svn
    - .hg
    - node_modules
    - .DS_Store
    - "*.swp"
    - "*~"
    - "#*#"
  
  # Files excluded from catchall handler
  catchallExclude:
    - .dodot.toml
    - .dodotignore
  
  # Special file names dodot looks for
  specialFiles:
    packConfig: .dodot.toml
    ignoreFile: .dodotignore

# Priorities determine processing order (higher = processed first)
priorities:
  triggers:
    filename: 100
    catchall: 0
  
  handlers:
    symlink: 100
    path: 90
    template: 70
  
  matchers:
    install-script: 90
    brewfile: 90
    shell-aliases: 80
    shell-profile: 80
    bin-dir: 90
    bin-path: 80
    local-bin-dir: 90
    local-bin-path: 80
    template: 70
    symlink-catchall: 0

# Link path configuration
linkPaths:
  # Files/directories that always deploy to $HOME (not XDG)
  coreUnixExceptions:
    - ssh        # .ssh/ - security critical
    - gnupg      # .gnupg/ - security critical
    - aws        # .aws/ - credentials
    - kube       # .kube/ - kubernetes config
    - docker     # .docker/ - docker config
    - gitconfig  # .gitconfig - git expects in $HOME
    - bashrc     # .bashrc - shell expects in $HOME
    - zshrc      # .zshrc - shell expects in $HOME
    - profile    # .profile - shell expects in $HOME

# Handler-specific defaults
handlerDefaults:
  # Default target directory for path handler
  pathTargetDir: "~/bin"

# Handler templates (multiline strings)
handlerTemplates:
  shellAliases: |
    #!/usr/bin/env sh
    # Shell aliases for PACK_NAME pack
    #
    # This file is sourced to add shell aliases during 'dodot deploy PACK_NAME'
    # 
    # Use standard shell alias syntax (compatible with bash/zsh/fish/etc)
    # dodot handles shell compatibility automatically
    #
    # Safe to keep empty or remove. By keeping it, you can add
    # aliases later without redeploying the pack.
    
    # Add aliases below
    # Examples:
    # alias ll='ls -la'
    # alias grep='grep --color=auto'
  
  brewfile: |
    # Homebrew dependencies for PACK_NAME pack
    # 
    # This file is processed by 'dodot install PACK_NAME' to install
    # packages using Homebrew. Each package is installed once during
    # initial deployment. The deployment is tracked by checksum, so
    # modifying this file will trigger a re-run.
    #
    # Safe to keep empty or remove. By keeping it, you can add
    # homebrew packages later without redeploying the pack.
    
    # Examples:
    # brew "git"
    # brew "vim"
    # cask "visual-studio-code"

# Shell integration snippets
shellIntegration:
  # Bash/Zsh integration
  bashZshSnippet: '[ -f "$HOME/.local/share/dodot/shell/dodot-init.sh" ] && source "$HOME/.local/share/dodot/shell/dodot-init.sh"'
  
  # Fish shell integration
  fishSnippet: |
    if test -f "$HOME/.local/share/dodot/shell/dodot-init.fish"
        source "$HOME/.local/share/dodot/shell/dodot-init.fish"
    end

# Logging configuration
logging:
  # Default log level
  defaultLevel: warn
  
  # Verbosity flag mappings
  verbosityLevels:
    0: warn
    1: info
    2: debug
    3: trace
  
  # Time format for console output
  timeFormat: "15:04"
  
  # Enable colored output
  enableColor: true
  
  # Show caller info at this verbosity level and above
  enableCallerAtVerbosity: 2

# Matcher definitions
matchers:
  - name: install-script
    type: matcher
    priority: 90
    triggerType: filename
    triggerData:
      pattern: install.sh
    handlerType: provision
    handlerData: {}
  
  - name: brewfile
    type: matcher
    priority: 90
    triggerType: filename
    triggerData:
      pattern: Brewfile
    handlerType: homebrew
    handlerData: {}
  
  - name: shell-aliases
    type: matcher
    priority: 80
    triggerType: filename
    triggerData:
      pattern: "*aliases.sh"
    handlerType: shell_profile
    handlerData:
      placement: aliases
  
  - name: shell-profile
    type: matcher
    priority: 80
    triggerType: filename
    triggerData:
      pattern: profile.sh
    handlerType: shell_profile
    handlerData:
      placement: environment
  
  - name: bin-dir
    type: matcher
    priority: 90
    triggerType: directory
    triggerData:
      pattern: bin
    handlerType: path
    handlerData: {}
  
  - name: bin-path
    type: matcher
    priority: 80
    triggerType: directory
    triggerData:
      pattern: bin
    handlerType: shell_add_path
    handlerData: {}
  
  - name: local-bin-dir
    type: matcher
    priority: 90
    triggerType: directory
    triggerData:
      pattern: .local/bin
    handlerType: path
    handlerData: {}
  
  - name: local-bin-path
    type: matcher
    priority: 80
    triggerType: directory
    triggerData:
      pattern: .local/bin
    handlerType: shell_add_path
    handlerData: {}
  
  - name: symlink-catchall
    type: matcher
    priority: 0
    triggerType: catchall
    triggerData: {}
    handlerType: symlink
    handlerData: {}
```

## User Configuration Examples

### Minimal User Config
Users can override just what they need:

```yaml
# ~/.config/dodot/config.yaml

# Add to the security settings
security:
  # Add custom protected paths to the existing list
  # These will be merged with the default protected paths
  protectedPaths:
    - .my-secret-app/config   # Application with sensitive data
    - .company/credentials    # Corporate credentials

# Extend the ignore patterns
patterns:
  # Add Python-specific files to ignore
  packIgnore:
    - "*.pyc"        # Python compiled files
    - __pycache__    # Python cache directories
    - .pytest_cache  # Pytest cache

# Override logging preferences
logging:
  enableColor: false  # Disable colors for terminals that don't support them
```

### Custom Matchers
Users can add their own matchers:

```yaml
# ~/.config/dodot/config.yaml

# Add custom matcher for Python virtual environments
matchers:
  - name: python-venv
    priority: 85              # Higher than shell-profile (80) but lower than bin-dir (90)
    triggerType: directory    # Matches directories
    triggerData:
      pattern: venv          # Directory named 'venv'
    handlerType: shell_profile
    handlerData:
      placement: environment # Add to environment section of shell profile
      template: |           # Custom template for activation
        # Activate Python virtual environment
        [ -d "$PACK_DIR/venv" ] && source "$PACK_DIR/venv/bin/activate"
```

### Repository-Specific Config
For dotfiles repositories with special needs:

```yaml
# $DOTFILES_ROOT/.dodot/config.yaml

# Repository-specific link path rules
linkPaths:
  # Additional exceptions for this repository
  # These supplement the default exceptions
  coreUnixExceptions:
    - my-app-config  # .my-app-config must go to $HOME, not XDG

# Override handler defaults for this repository
handlerDefaults:
  # Use ~/.local/bin instead of ~/bin for this specific dotfiles repo
  pathTargetDir: "~/.local/bin"
```

## Design Decisions

1. **YAML over TOML**: While dodot uses TOML for pack configs, YAML is better for complex nested structures and multiline strings (templates).

2. **Flat vs Nested**: The structure mirrors the Go types for clarity and easy mapping.

3. **Arrays vs Maps**: 
   - `protectedPaths` uses an array for easier user additions
   - `coreUnixExceptions` uses an array (converted to map internally)
   - `priorities` remain as maps for clear key-value relationships

4. **No Schema Version**: Initially keeping it simple. Can add version field later if needed.

5. **Environment Variables**: Not shown in YAML but will support overrides like:
   - `DODOT_LOG_LEVEL=debug`
   - `DODOT_LOG_COLOR=false`
   - `DODOT_PATH_TARGET_DIR=~/my-bin`

## Implementation Notes

1. The YAML will be parsed into the existing Go structs
2. Default config will be embedded using `go:embed`
3. User configs will be merged using koanf in Phase 3
4. Validation will ensure:
   - Required fields are present
   - Types are correct
   - Paths are valid
   - Priorities are numeric