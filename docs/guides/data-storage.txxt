                   Data Storage and Organization

This guide explains how dodot organizes and stores your configuration
files, how symlinks work, and what happens during deployment.

The Pack Concept
----------------

dodot organizes configurations into "packs" - directories containing
related files that get deployed together. This provides logical grouping
and makes it easy to enable/disable related configurations.

Example pack structure:
```
DOTFILES_ROOT/
├── vim/                    # vim pack
│   ├── vimrc              # → ~/.vimrc
│   ├── gvimrc             # → ~/.gvimrc  
│   └── .dodot.toml        # pack configuration
├── git/                   # git pack
│   ├── gitconfig          # → ~/.gitconfig
│   ├── gitignore_global   # → ~/.gitignore_global
│   └── aliases.sh         # sourced in shell profile
└── development/           # development pack
    ├── bin/               # added to PATH
    │   └── dev-scripts
    ├── Brewfile           # processed by Homebrew
    └── install.sh         # executed once
```

File Deployment Strategies
---------------------------

dodot uses different strategies based on file types and locations:

1. Symbolic Links:
   Most configuration files are deployed via symbolic links:
   • Source: DOTFILES_ROOT/pack/filename  
   • Target: ~/.filename (with dot prefix)
   • Changes to source file are immediately live

2. Shell Integration:
   Shell files are sourced rather than linked:
   • alias.sh files are sourced in shell profiles
   • env.sh files export environment variables
   • Custom PATH additions are handled specially

3. Run-Once Operations:
   Some files trigger one-time operations:
   • install.sh scripts are executed
   • Brewfiles are processed by Homebrew
   • Tracked via sentinel files to prevent re-execution

Symlink Behavior
----------------

File Naming Rules:
• Files in pack root: pack/vimrc → ~/.vimrc (dot prefix added)
• Directories in pack root: pack/config → ~/config (no dot prefix)
• Files in subdirectories: keep original path structure

Target Directory Rules:
• Default target: user home directory (~)
• Override via power-up options: target_dir = "~/.config"
• Nested directories created automatically if needed

Link Safety:
• Existing files backed up if backup=true option set
• Existing symlinks replaced if overwrite=true
• Directory creation handled automatically

Data Persistence
----------------

dodot stores minimal persistent data:

Sentinel Files:
Location: DODOT_DATA_DIR (default: ~/.local/share/dodot)
Purpose: Track run-once operations to prevent re-execution

Structure:
```
~/.local/share/dodot/
├── homebrew/
│   ├── pack1           # checksum of pack1/Brewfile
│   └── pack2           # checksum of pack2/Brewfile
└── install/
    ├── pack1           # checksum of pack1/install.sh
    └── pack2           # checksum of pack2/install.sh
```

Shell Integration Method:
dodot uses a central directory for shell integration. It creates symlinks
from your source files (e.g., `aliases.sh`) into this directory:
`~/.local/share/dodot/shell/profile.d/`

Your shell startup script (e.g., `.zshrc`, `.bashrc`) is configured once
to source all `.sh` files from that directory. This avoids creating
multiple `~/.dodot_*` files in your home directory.

No State Database:
dodot deliberately avoids state databases. Deployment status is determined
by examining the current filesystem, not by consulting stored metadata.

Directory Structure Examples
-----------------------------

Minimal Pack:
```
vim/
├── vimrc              # basic vim configuration
└── .dodot.toml        # optional overrides
```

Complex Pack:
```
development/
├── bin/               # executables added to PATH
│   ├── git-helpers
│   └── dev-scripts
├── config/            # configuration directory
│   ├── git/
│   │   └── hooks/
│   └── editors/
├── aliases.sh         # shell aliases
├── env.sh            # environment variables
├── Brewfile          # package dependencies
├── install.sh        # setup script
└── .dodot.toml       # pack configuration
```

Configuration Override:
```
.dodot.toml:
[[ignore]]
  path = "*.backup"    # skip backup files

[[override]]
  path = "config"
  powerup = "symlink"
  with = { target_dir = "~/.config" }
```

Storage Benefits
----------------

Version Control Integration:
• Everything is stored in your git repository
• No external databases or metadata
• Easy to backup, share, and version

Transparency:
• You can see exactly what will be deployed
• No hidden state or magic transformations
• Easy to debug and understand

Portability:
• Works on any system with git and dodot
• No migration or export procedures needed
• Self-contained in your dotfiles repository

Live Editing:
• Edit files directly in your repository
• Changes are immediately active via symlinks
• No separate update or sync commands needed

Storage Limitations
-------------------

Structural Changes:
If you add new files to a pack after deployment, they won't be active
until redeployment. Use 'dodot fill' to create placeholder files that
get linked immediately.

Binary Files:
dodot works best with text configuration files. Binary files can be
stored but don't benefit from live editing.

Secrets Management:
dodot doesn't provide built-in secrets management. Use external tools
like pass, 1Password CLI, or environment variables for sensitive data.

Platform Differences:
Some files may be platform-specific. Use separate packs or conditional
logic in install.sh scripts to handle differences.

Data Recovery
-------------

Since everything is in git:
1. Your configurations are versioned and backed up
2. You can restore to any previous state via git
3. No special recovery procedures needed
4. Symlinks will continue working even without dodot

To completely remove dodot traces:
1. Remove symlinks: replace with actual files if desired
2. Remove shell integration lines from profiles
3. Clean up DODOT_DATA_DIR if desired
4. Your dotfiles repository remains intact and usable