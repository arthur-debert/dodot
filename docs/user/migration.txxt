                   Migration Guide

This guide explains how to migrate to and from dodot, ensuring data
portability and avoiding lock-in.

Migrating TO dodot
------------------

From Manual Dotfiles Management:

1. Create a dotfiles repository:
   $ mkdir ~/dotfiles && cd ~/dotfiles
   $ git init

2. Organize configs into packs:
   $ mkdir vim git ssh
   $ mv ~/.vimrc vim/vimrc
   $ mv ~/.gitconfig git/gitconfig
   $ mv ~/.ssh/config ssh/config

3. Set environment variable:
   $ export DOTFILES_ROOT=~/dotfiles

4. Deploy configurations:
   $ dodot deploy --all

From GNU Stow:

dodot works similarly to stow but with additional power-ups. Your existing
stow directory structure mostly translates directly:

1. Rename stow packages to dodot packs (optional)
2. Move files from package subdirectories to pack root:
   • stow: vim/.vimrc → dodot: vim/vimrc
3. Convert stow ignore files to .dodot.toml ignore rules
4. Deploy with dodot instead of stow

From Dotbot:

1. Extract file mappings from install.conf.yaml
2. Place source files in appropriate packs
3. Convert shell commands to install.sh scripts
4. Replace link directives with dodot's automatic symlinking

From Chezmoi:

1. Export current state: chezmoi archive > backup.tar
2. Extract source files from chezmoi's source directory
3. Organize into dodot packs by logical grouping
4. Convert chezmoi templates to plain files or install.sh scripts
5. Use dodot's shell_profile power-up for environment variables

Migrating FROM dodot
--------------------

dodot deliberately avoids lock-in. Your configurations remain in standard
formats:

Data Portability:

• Configuration files are stored as-is in git
• No proprietary formats or databases
• Symlinks point to actual files in your repository
• Shell modifications are standard shell scripting

To stop using dodot:

1. Your files remain in the dotfiles repository
2. Symlinks continue to work without dodot
3. Shell profile modifications remain active
4. Optional: Replace symlinks with copied files:
   ```bash
   # For each symlink, replace with actual file
   for link in $(find ~ -type l); do
     if [[ $(readlink "$link") == */dotfiles/* ]]; then
       cp --remove-destination "$(readlink "$link")" "$link"
     fi
   done
   ```

Manual Management After dodot:

Since dodot uses standard symlinks and shell includes, you can continue
managing files manually:

• Edit files directly in your dotfiles repository
• Create new symlinks manually: ln -s ~/dotfiles/pack/file ~/.file
• Add shell sourcing manually: echo "source ~/dotfiles/pack/aliases.sh" >> ~/.bashrc

Migration to Other Tools:

To GNU Stow:
• Move files to subdirectories matching target locations
• Use stow instead of dodot for deployment

To Dotbot:
• Create install.conf.yaml mapping pack files to target locations
• Convert install.sh scripts to shell commands in config

To Chezmoi:
• Import files: chezmoi add ~/.vimrc ~/.gitconfig
• Convert install.sh scripts to chezmoi scripts

Best Practices for Portability
-------------------------------

1. Keep Standard Formats:
   • Use standard config file formats (.vimrc, .gitconfig, etc.)
   • Avoid dodot-specific features when possible
   • Document any custom install.sh scripts

2. Version Control Everything:
   • Keep your entire dotfiles repository in git
   • Include .dodot.toml files for pack configuration
   • Tag releases for stable configurations

3. Documentation:
   • Document pack purposes in README files
   • Explain any complex install.sh scripts
   • Note dependencies in Brewfiles

4. Test Portability:
   • Regularly test deployment on fresh systems
   • Verify configurations work without dodot
   • Keep backup copies of important configs

Zero Lock-in Philosophy
-----------------------

dodot is designed with these principles:

• Your data is yours - stored in standard formats
• No proprietary databases or state files
• Symlinks and shell modifications use standard UNIX practices
• Easy migration to and from other tools
• Works with any git repository structure

This ensures you can always access and manage your configurations, with or
without dodot.