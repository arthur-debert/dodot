                   Power-ups in dodot

This document lists all available power-ups in dodot, their purpose, and
usage examples. Power-ups are the core functionality providers that take
matched files and generate deployment actions.

1. Symlink Power-up (symlink)
-----------------------------

Purpose: Creates symbolic links from pack files to target locations.
This is the primary mechanism for deploying configuration files.

Trigger: Configuration files like vimrc, gitconfig, etc.

Options:
• target_dir - Where to create the symlink (default: "~")
• create_dirs - Create parent directories if needed (default: true)
• overwrite - Replace existing files/links (default: false)
• backup - Backup existing files before overwriting (default: false)

Behavior:
• Files linked to home (~) get a dot prefix (vimrc → .vimrc)
• Directories linked to home keep their original name
• Files/dirs linked to subdirectories keep their original name

Example:
```toml
[[override]]
  path = "vimrc"
  powerup = "symlink"
  with = { target_dir = "~", backup = true }
```

2. Shell Profile Power-up (shell_profile)
------------------------------------------

Purpose: Manages shell profile modifications including sourcing files,
appending content, or exporting environment variables.

Trigger: Files like alias.sh, env.sh, or other shell configuration files.

Options:
• shell - Target shell (auto-detected if not specified)
• action_type - How to integrate the file:
  - "source" - Source the file from profile (default)
  - "append" - Append file contents to profile
  - "export_vars" - Parse and export as environment variables
• profile_preference - Which profile file to modify (.bashrc vs .bash_profile)
• export_prefix - Prefix for exported variables (only for export_vars)
• order - Numeric order for multiple profile modifications (default: 50)

Example:
```toml
[[override]]
  path = "work-env.sh"
  powerup = "shell_profile"
  with = { action_type = "export_vars", export_prefix = "WORK_" }
```

3. Shell Add Path Power-up (shell_add_path)
--------------------------------------------

Purpose: Adds directories to the system PATH environment variable for
different shells. Enables executables in pack bin directories to be
available system-wide.

Trigger: Typically triggered by a "bin" directory in a pack.

Options:
• bin_dir - Explicit directory to add to PATH (overrides matched files)
• shell - Target shell (auto-detected if not specified)
• prepend - Whether to add to beginning of PATH (default: false)

Example:
```toml
[[override]]
  path = "bin"
  powerup = "shell_add_path"
  with = { prepend = true }
```

4. Brewfile Power-up (homebrew)
-------------------------------

Purpose: Processes Brewfiles to install Homebrew packages. Enables
declarative package management for macOS and Linux systems.

Trigger: Files named "Brewfile" in a pack.

Run Mode: Run-once (executes only when Brewfile changes)

Behavior:
• Creates sentinel file with checksum to track execution
• Skipped if already executed unless --force flag is used
• Only runs during "install" command, not "deploy"

Example Brewfile:
```ruby
# Install packages
brew "git"
brew "vim"
brew "tmux"

# Install GUI applications
cask "firefox"
cask "visual-studio-code"
```

5. Install Script Power-up (install_script)
--------------------------------------------

Purpose: Executes installation or setup scripts within packs. Allows
packs to perform custom setup operations like downloading files,
compiling software, or running configuration commands.

Trigger: Files named "install.sh" in a pack.

Run Mode: Run-once (executes only when install.sh changes)

Behavior:
• Executes script with pack's directory as working directory
• Creates sentinel file with checksum to track execution
• Skipped if already executed unless --force flag is used
• Scripts should still be idempotent for safety
• Only runs during "install" command, not "deploy"

Example install.sh:
```bash
#!/bin/bash
set -e

# Download additional files
curl -o ~/.local/bin/script https://example.com/script

# Set permissions
chmod +x ~/.local/bin/script

echo "Pack installation complete"
```

Run-Once Power-ups
------------------

Some power-ups (Brewfile and Install Script) are "run-once" power-ups with
special behavior:

1. Execution Tracking: Create sentinel files in DODOT_DATA_DIR with
   checksums to track execution state

2. Change Detection: If source file changes (checksum differs), the
   power-up runs again to apply updates

3. Force Flag: --force bypasses sentinel checks and forces re-execution

4. Status Reporting: dodot status shows which run-once power-ups have
   been executed

Sentinel file locations:
• Brewfile: $DODOT_DATA_DIR/homebrew/<pack>
• Install Script: $DODOT_DATA_DIR/install/<pack>

This prevents expensive operations from running repeatedly while allowing
updates when files change.

Design Notes
------------

All power-ups follow the same pattern:
1. Receive matched files from triggers
2. Validate their inputs  
3. Generate high-level action descriptions
4. Never directly modify the filesystem

This design enables:
• Easy testing through pure functions
• Clear separation of concerns
• Predictable behavior
• Safe error handling and potential rollback