dodot Implementation Roadmap
===========================

This document outlines the implementation phases for dodot, a stateless dotfiles manager written in Go. 

The roadmap is bellow needs updateing, until we do, here's a high lever view of
how we're handling it:

    - core: get features and logic implemented. 
    - file operations: : with the core logic correctly verified, we can byte
      the bullet and actually execute the synthfs operation. At this time the
      program becomes actually funcional.
    - cli: now, with a working and useful code, we will actually write the cli,
      which will leverage the fact that all program core commands are
      implemented as a pure go api, that is, the cli rally is about the thin
      cli part.
In short: get it right, make it commit the changes, expose the ui through cli.

Overview
--------

The implementation is divided into 7 phases, each building upon the previous to deliver incremental value:

    Phase 0: Script Cleanup & Foundation (1-2 days) (DONE)
    Phase 1: Core Foundation (1 week)
    Phase 2: Core Pipeline with Minimal CLI (1 week)
    Phase 3: First Working Feature - MVP (1 week)
    Phase 4: Expand Core Functionality (1-2 weeks)
    Phase 5: Advanced Features & Polish (2 weeks)
    Phase 6: Configuration System (1 week)
    Phase 7: Production Release (1 week)

Total estimated time: 8-10 weeks for a production-ready v1.0.0 release.


Phase 0: Script Cleanup & Foundation
------------------------------------

Goal: Update project tooling to use correct project name and ensure all infrastructure is working.

Deliverable 0.1: Script Updates (DONE)
Tasks:
- Update all references from "my-awesome-cli" to "dodot" in scripts/ (DONE)
- Update .goreleaser.yml configuration (DONE)
- Update GitHub workflow files (DONE)
- Verify all scripts work correctly (DONE)

Success Criteria:
- All scripts reference "dodot" correctly
- ./scripts/build produces bin/dodot binary
- All tooling functional with correct naming


Phase 1: Core Foundation (DONE)
------------------------

Goal: Establish foundational components for the rest of the implementation.

Deliverable 1.1: Project Structure (DONE)
Tasks:
- Finalize directory layout as specified in execution.txxt section 4.3
- Create all package directories with appropriate doc.go files
- Set up internal/ directory for non-exported utilities
- Initialize proper module structure

Success Criteria:
- Directory structure matches specification
- go mod tidy runs successfully
- Package imports resolve correctly

Deliverable 1.2: Logging System (DONE)
Tasks:
- Implement centralized logging with zerolog in pkg/logging/
- Configure dual output (stdout and XDG_STATE_HOME/dodot/dodot.log)
- Default log level WARN with -v (INFO), -vv (DEBUG), -vvv (TRACE)
- Create logging utilities for consistent formatting
- Add context-aware logging helpers

Success Criteria:
- Logging package functional with all levels
- File and console output working correctly
- Log levels controllable via flags
- All future code uses structured logging

Deliverable 1.3: Error Handling System (DONE)
Tasks:
- Create pkg/errors/ with DodotError type including error codes
- Define error code constants for different error categories
- Implement error wrapping that preserves codes
- Create error formatting utilities
- Add IsErrorCode() helper for testing

Success Criteria:
- Error system supports codes for stable testing
- Error wrapping preserves context and codes
- Clear error messages with actionable information

Deliverable 1.4: Registry System (DONE)
Tasks:
- Implement generic Registry[T] interface in pkg/registry/
- Create thread-safe registry implementation
- Add Registry methods: Register, Get, Remove, List
- Create registries for Triggers, PowerUps, Actions
- Implement auto-registration pattern with init()

Success Criteria:
- Registry system type-safe and thread-safe
- Auto-registration working with init() functions
- Full test coverage for registry operations

Deliverable 1.5: Testing Helpers (DONE)
Tasks:
- Create pkg/testutil/ with common test utilities
- Implement temporary directory helpers
- Add file system test fixtures
- Create assertion helpers for common patterns
- Set up test data directory structure

Success Criteria:
- Test helpers reduce boilerplate in tests
- Temporary directories cleaned up properly
- Test fixtures easily accessible


Phase 2: Core Pipeline with Minimal CLI (DONE)
---------------------------------------

Goal: Implement the core execution pipeline and minimal CLI to test it end-to-end.

Deliverable 2.1: Type Definitions (DONE)
Tasks:
- Define all interfaces in pkg/types/: Trigger, PowerUp, Action
- Create data structures: Pack, TriggerMatch, Matcher
- Define Operation types for synthfs compatibility
- Add validation methods to types
- Create type documentation

Success Criteria:
- All core types defined with clear interfaces
- Types have validation methods
- GoDoc documentation complete

Deliverable 2.2: Pipeline Skeleton (DONE)
Tasks:
- Implement pkg/core/packs.go with GetPackCandidates and GetPacks
- Implement pkg/core/triggers.go with GetFiringTriggers
- Implement pkg/core/actions.go with GetActions
- Implement pkg/core/operations.go with GetFsOps
- Add logging throughout pipeline stages

Success Criteria:
- Pipeline functions compile and have correct signatures
- Data flows correctly between stages
- Comprehensive logging at each stage

Deliverable 2.3: Minimal CLI (DONE)
Tasks:
- Create cmd/dodot/main.go with cobra setup
- Implement root command with global flags (-v, --dry-run)
- Add deploy command skeleton that calls pipeline
- Wire up logging flags to logging system
- Add version command using embedded version info

Success Criteria:
- dodot --help shows command structure
- dodot deploy --dry-run runs without error
- Logging verbosity flags work correctly
- Version command shows build information

Deliverable 2.4: Pipeline Integration Tests (DONE)
Tasks:
- Create integration tests for complete pipeline flow
- Test with mock triggers and power-ups
- Verify data transformation at each stage
- Test error propagation through pipeline
- Add benchmarks for pipeline performance

Success Criteria:
- End-to-end pipeline tests pass
- Mock components work correctly
- Error handling tested thoroughly


Phase 3: First Working Feature - MVP (PARTIALLY DONE)
------------------------------------

Goal: Implement minimal functionality to symlink dotfiles to home directory.

Deliverable 3.1: FileNameTrigger (DONE)
Tasks:
- Implement FileNameTrigger in pkg/triggers/filename.go
- Support exact match and glob patterns
- Add comprehensive unit tests
- Register trigger in init() function
- Add logging for match decisions

Success Criteria:
- Trigger matches files by name patterns
- Glob patterns work correctly
- Tests cover edge cases

Deliverable 3.2: SymlinkPowerUp (DONE)
Tasks:
- Implement SymlinkPowerUp in pkg/powerups/symlink.go
- Generate symlink actions for matched files
- Default target to user home directory
- Add conflict detection
- Register power-up in init()

Success Criteria:
- Power-up generates correct symlink actions
- Conflicts detected and reported
- Actions have clear descriptions

Deliverable 3.3: Basic Matcher System (DONE)
Tasks:
- Implement matcher creation and configuration
- Connect FileNameTrigger to SymlinkPowerUp
- Add default matchers for common patterns (.vimrc, .zshrc, etc.)
- Implement matcher priority system
- Add matcher validation

Success Criteria:
- Matchers connect triggers to power-ups correctly
- Default matchers work for common dotfiles
- Priority system resolves conflicts

Deliverable 3.4: synthfs Integration (NOT DONE)
Tasks:
- Integrate synthfs library for executing operations
- Implement action to synthfs operation conversion
- Add dry-run support using synthfs preview
- Implement basic rollback on errors
- Add operation logging

Success Criteria:
- Operations execute through synthfs
- Dry-run shows planned changes without executing
- Errors trigger appropriate rollback

Deliverable 3.5: First Release (NOT DONE)
Tasks:
- Update deploy command to work end-to-end
- Add basic documentation for MVP usage
- Test on real dotfiles repositories
- Fix any integration issues
- Tag v0.1.0 release

Success Criteria:
- Can symlink dotfiles to home directory
- Dry-run mode works correctly
- No critical bugs in basic usage


Phase 4: Expand Core Functionality (PARTIALLY DONE)
----------------------------------

Goal: Add the remaining core triggers and power-ups for a fully functional system.

Deliverable 4.1: Additional Triggers (NOT DONE)
Tasks:
- Implement DirectoryTrigger for matching directories
- Implement ExtensionTrigger for file extensions
- Add PathPatternTrigger for complex path matching
- Register all triggers
- Add comprehensive tests

Success Criteria:
- All triggers work as specified
- Tests cover various scenarios
- Triggers compose well with matchers

Deliverable 4.2: Profile PowerUp (NOT DONE)
Tasks:
- Implement ProfilePowerUp for shell configuration
- Detect user's shell type (bash, zsh, fish)
- Generate shell sourcing actions
- Handle multiple shell support
- Create dodot-managed profile directory

Success Criteria:
- Shell files sourced correctly on login
- Multiple shells supported
- Profile modifications are idempotent

Deliverable 4.3: Bin PowerUp (NOT DONE)
Tasks:
- Implement BinPowerUp for PATH management
- Create ~/.local/share/dodot/bin/ directory
- Generate PATH modification actions
- Add executable validation
- Support recursive bin directories

Success Criteria:
- Executables accessible in PATH
- PATH modifications work across shells
- Handles nested bin directories

Deliverable 4.4: Basic Configuration (DONE)
Tasks:
- Add TOML parsing with pelletier/go-toml/v2
- Implement .dodot.toml pack configuration
- Support custom matcher definitions
- Allow trigger parameter overrides
- Add configuration validation

Success Criteria:
- Pack-specific configuration works
- Can define custom matchers in TOML
- Invalid configuration caught early

Deliverable 4.5: Core Feature Complete (NOT DONE)
Tasks:
- Integration testing with all power-ups
- Performance optimization
- Memory usage profiling
- Update documentation
- Tag v0.5.0 release

Success Criteria:
- All core features working together
- Performance acceptable for large dotfiles
- Ready for broader testing


Phase 5: Advanced Features & Polish
-----------------------------------

Goal: Add advanced functionality and polish the user experience.

Deliverable 5.1: Advanced PowerUps (PARTIALLY DONE)
Tasks:
- Implement BrewPowerUp for Brewfile processing (DONE)
- Implement ScriptRunnerPowerUp for install.sh (DONE as InstallScriptPowerUp)
- Add Template PowerUp for file generation
- Implement Stow compatibility mode
- Add comprehensive tests

Success Criteria:
- Brew installations work idempotently
- Scripts run safely with proper context
- Templates expand variables correctly

Deliverable 5.2: Advanced Triggers
Tasks:
- Implement ContentTrigger for file content matching
- Add CombinationTrigger for AND/OR logic
- Implement ExclusionTrigger for negative matches
- Add trigger debugging output
- Performance optimization for content scanning

Success Criteria:
- Content matching works efficiently
- Complex trigger logic possible
- Performance remains acceptable

Deliverable 5.3: List Command
Tasks:
- Implement list command to show available packs
- Add pack status information (deployed/not deployed)
- Show pack descriptions from .dodot.toml
- Add filtering options
- Format output nicely

Success Criteria:
- Clear overview of available packs
- Status information accurate
- Output formatted for terminal

Deliverable 5.4: Shell Completion
Tasks:
- Generate completion scripts via cobra
- Add pack name completion for deploy command
- Support bash, zsh, and fish
- Create installation instructions
- Test completions in each shell

Success Criteria:
- Completions work in all supported shells
- Pack names complete correctly
- Installation documented clearly

Deliverable 5.5: Enhanced Error Handling
Tasks:
- Add detailed error messages with suggestions
- Implement error recovery strategies
- Add --continue-on-error flag
- Improve rollback capabilities
- Create troubleshooting guide

Success Criteria:
- Errors provide actionable guidance
- Can continue past non-critical errors
- Rollback works reliably


Phase 7: Production Release
---------------------------

Goal: Prepare for production release with polish and documentation.

Deliverable 7.1: Performance Optimization
Tasks:
- Profile CPU and memory usage
- Optimize hot paths
- Add caching where appropriate
- Implement parallel pack processing
- Benchmark against large dotfiles repos

Success Criteria:
- Acceptable performance on large repos
- Memory usage reasonable
- No performance regressions

Deliverable 7.2: Comprehensive Documentation
Tasks:
- Write user guide with examples
- Create pack authoring guide
- Document all power-ups and triggers
- Add troubleshooting section
- Create migration guide from other tools

Success Criteria:
- Documentation covers all features
- Examples are practical and tested
- Common issues addressed

Deliverable 7.3: Release Engineering
Tasks:
- Set up automated release process
- Create release checklist
- Add release notes generation
- Set up Homebrew tap
- Create distribution packages

Success Criteria:
- Releases are automated and reliable
- Installation simple on all platforms
- Release notes comprehensive

Deliverable 7.4: Community Preparation
Tasks:
- Create contribution guidelines
- Set up issue templates
- Add code of conduct
- Create roadmap for future versions
- Plan announcement strategy

Success Criteria:
- Project welcoming to contributors
- Clear processes for contributions
- Ready for public announcement

Deliverable 7.5: Version 1.0.0
Tasks:
- Final testing across platforms
- Security audit
- Performance validation
- Documentation review
- Tag and release v1.0.0

Success Criteria:
- No critical bugs
- Performance meets targets
- Documentation complete
- Ready for production use


Implementation Notes
-------------------

1. Testing Strategy
   - Every deliverable includes tests as part of definition of done
   - Unit tests for pure functions using table-driven tests
   - Integration tests for pipeline stages
   - E2E tests for commands

2. Documentation Strategy
   - All documentation in txxt format
   - Code documentation via GoDoc
   - User documentation in docs/
   - Examples tested automatically

3. Release Strategy
   - Semantic versioning from the start
   - Alpha releases during development (0.x.x)
   - Beta releases for testing (0.9.x)
   - Production release at 1.0.0

4. Development Practices
   - All code must pass linting
   - Pre-commit hooks mandatory
   - Tests required for new features
   - Logging required throughout

5. Success Metrics
   - Test coverage > 80%
   - No critical bugs in releases
   - Performance < 1s for typical repos
   - Memory usage < 50MB for typical repos
