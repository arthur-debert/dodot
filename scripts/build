#!/usr/bin/env bash
set -euo pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
BOLD='\033[1m'
NC='\033[0m' # No Color

# Build output directory (using bin/ to avoid conflicts with goreleaser's dist/)
BIN_DIR="bin"

echo -e "${BLUE}${BOLD}üî® Building dodot...${NC}"
echo

# Clean and create build directories
echo -e "${BLUE}Setting up build directories...${NC}"
# Only clean the bin directory, preserve other build artifacts
rm -rf "${BIN_DIR}"
mkdir -p "${BIN_DIR}"
echo -e "${GREEN}‚úÖ Build directories ready${NC}"
echo

# Get version information from git
VERSION=$(git describe --tags --always --dirty 2>/dev/null || echo "dev")
COMMIT=$(git rev-parse --short HEAD 2>/dev/null || echo "unknown")
BUILD_DATE=$(date -u '+%Y-%m-%d_%H:%M:%S')

# Show build information
echo -e "${BLUE}Build Information:${NC}"
echo -e "  Version: ${BOLD}$VERSION${NC}"
echo -e "  Commit:  ${BOLD}$COMMIT${NC}"
echo -e "  Date:    ${BOLD}$BUILD_DATE${NC}"
echo

# Download dependencies first
echo -e "${BLUE}Downloading dependencies...${NC}"
go mod download

# List all packages to ensure they're recognized
echo -e "${BLUE}Listing all packages...${NC}"
go list ./...

# Build all packages first
echo -e "${BLUE}Building all packages...${NC}"
if go build -v ./...; then
    echo -e "${GREEN}‚úÖ All packages built successfully${NC}"
else
    echo -e "${RED}‚ùå Package build failed${NC}"
    exit 1
fi

# Set up LDFLAGS for version embedding
LDFLAGS="-s -w"
LDFLAGS="$LDFLAGS -X github.com/arthur-debert/dodot/internal/version.Version=$VERSION"
LDFLAGS="$LDFLAGS -X github.com/arthur-debert/dodot/internal/version.Commit=$COMMIT"
LDFLAGS="$LDFLAGS -X github.com/arthur-debert/dodot/internal/version.Date=$BUILD_DATE"

# Build the main binary
echo
echo -e "${BLUE}Building CLI binary...${NC}"
if go build -ldflags "$LDFLAGS" -o "${BIN_DIR}/dodot" ./cmd/dodot/main; then
    echo -e "${GREEN}‚úÖ Binary built successfully: ${BIN_DIR}/dodot${NC}"
else
    echo -e "${RED}‚ùå Binary build failed${NC}"
    exit 1
fi

# Run tests if not skipped
if [[ "${SKIP_TESTS:-}" != "true" ]]; then
    echo
    echo -e "${YELLOW}Running tests...${NC}"
    if go test ./... -short; then
        echo -e "${GREEN}‚úÖ All tests passed${NC}"
    else
        echo -e "${RED}‚ùå Tests failed${NC}"
        exit 1
    fi
else
    echo
    echo -e "${YELLOW}‚ö†Ô∏è  Tests skipped (SKIP_TESTS=true)${NC}"
fi

# Verify the binary works
echo
echo -e "${BLUE}Verifying binary...${NC}"
if "${BIN_DIR}/dodot" --version >/dev/null 2>&1; then
    echo -e "${GREEN}‚úÖ Binary verification passed${NC}"
    # Show actual version output
    echo -e "${BLUE}Version output:${NC}"
    "${BIN_DIR}/dodot" --version || true
elif "${BIN_DIR}/dodot" --help >/dev/null 2>&1; then
    echo -e "${GREEN}‚úÖ Binary verification passed (via --help)${NC}"
else
    echo -e "${RED}‚ùå Binary verification failed${NC}"
    exit 1
fi

echo
echo -e "${GREEN}${BOLD}üéâ Build completed successfully!${NC}"
echo -e "${BLUE}Binary location: ${BOLD}${BIN_DIR}/dodot${NC}"