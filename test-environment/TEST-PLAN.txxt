Docker Integration Test Plan
============================

Testing Philosophy
------------------
- Real-world scenarios only - No mocking (except brew for practicality)
- Progressive complexity - Start simple, only advance when basics work  
- Fail fast - If single powerup fails, don't test combinations
- Test both happy paths AND error conditions

Phase 1: Single PowerUp Tests (Isolation)
-----------------------------------------

1.1 Deploy PowerUps Priority Order: symlink → shell_profile → shell_add_path

### Symlink PowerUp (PRIORITY 1)
- [ ] Basic symlink creation (.vimrc → vim/.vimrc)
- [ ] Nested directory symlinks (.config/nvim/init.vim)
- [ ] Symlink overwrites existing file (with backup verification)
- [ ] ERROR: Symlink to non-existent source file
- [ ] ERROR: Symlink when target exists as directory
- [ ] ERROR: No write permission in target directory
- [ ] Symlink with spaces in filename
- [ ] Verify symlink removal on undeploy

### Shell Profile PowerUp (PRIORITY 2)
- [ ] Append to existing .zshrc
- [ ] Create .zshrc if missing
- [ ] Idempotency - multiple runs don't duplicate entries
- [ ] Multiple shell targets (.bashrc and .zshrc)
- [ ] ERROR: Read-only .zshrc
- [ ] ERROR: .zshrc is a directory
- [ ] Verify profile entries are commented with pack name

### Shell Add Path PowerUp (PRIORITY 3)
- [ ] Add single directory to PATH
- [ ] Add multiple directories to PATH
- [ ] Idempotency - path not duplicated
- [ ] Path with spaces handling
- [ ] ERROR: Non-existent directory in path
- [ ] ERROR: Path is a file not directory

1.2 Install PowerUps Priority: install_script → brewfile

### Install Script PowerUp (PRIORITY 1)
- [ ] Execute simple echo script
- [ ] Script with arguments
- [ ] Script creating files/directories
- [ ] Idempotency via sentinel file
- [ ] ERROR: Script exits with non-zero
- [ ] ERROR: Script file not executable
- [ ] ERROR: Script file missing
- [ ] Verify sentinel prevents re-run

### Brewfile PowerUp (PRIORITY 2)
- [ ] Process valid Brewfile (using mock brew)
- [ ] Verify brew bundle --file called correctly
- [ ] Check sentinel file creation
- [ ] ERROR: Missing Brewfile
- [ ] ERROR: Invalid Brewfile syntax
- [ ] ERROR: brew formula doesn't exist (mock returns error)
- [ ] Verify brew-full can be used for real brew tests

Phase 2: Multiple PowerUps (Same Pack)
--------------------------------------

2.1 Multiple Deploy PowerUps
- [ ] symlink + shell_profile in same pack
- [ ] All three deploy types in one pack
- [ ] Verify execution order matches priority

2.2 Multiple Install PowerUps
- [ ] install_script + brewfile in same pack
- [ ] Multiple install scripts with dependencies
- [ ] Verify both run on first install

2.3 Mixed Deploy + Install
- [ ] symlink (deploy) + install_script in same pack
- [ ] Verify deploy runs on every 'dodot deploy'
- [ ] Verify install only runs once

Phase 3: Multi-Pack Scenarios
-----------------------------

3.1 Simple Multi-Pack
- [ ] Two packs (vim + zsh), one powerup each
- [ ] Verify pack execution order (alphabetical?)
- [ ] Cross-pack file conflict detection

3.2 Complex Multi-Pack  
- [ ] Full dotfiles setup: vim + zsh + git + ssh
- [ ] Each pack with multiple powerups
- [ ] Verify no interference between packs

Phase 4: Edge Cases & Error Handling
------------------------------------

4.1 File System Edge Cases
- [ ] Read-only target directory (chmod 555)
- [ ] Broken symlinks in target
- [ ] Very long paths (near PATH_MAX)
- [ ] Unicode filenames (emoji in paths)
- [ ] Symlink chains (link → link → file)

4.2 Configuration Errors
- [ ] Invalid .dodot.toml syntax
- [ ] Missing required trigger fields
- [ ] Unknown powerup type
- [ ] Circular pack dependencies

4.3 Environment Issues
- [ ] Missing DOTFILES_ROOT
- [ ] DOTFILES_ROOT is a file not directory
- [ ] HOME directory doesn't exist
- [ ] No write permissions in HOME

Phase 5: Command-Level Tests
----------------------------

5.1 Deploy Command
- [ ] `dodot deploy` (all packs)
- [ ] `dodot deploy vim` (single pack)
- [ ] `dodot deploy vim zsh` (multiple packs)
- [ ] ERROR: Non-existent pack name
- [ ] Verify --dry-run doesn't make changes

5.2 Install Command
- [ ] `dodot install` (all packs)
- [ ] `dodot install vim` (single pack)  
- [ ] Idempotency - second run skips installs
- [ ] ERROR: Install script fails

5.3 Status Command
- [ ] Shows deployed symlinks correctly
- [ ] Shows install status (run/not run)
- [ ] Pack filtering works
- [ ] JSON output format

Implementation Notes
--------------------

1. Test Structure:
   ```zsh
   Describe 'Symlink PowerUp'
     BeforeEach 'reset_test_environment'
     AfterEach 'cleanup_test_environment'
     
     It 'creates basic symlink'
       # Setup
       create_dodot_config "vim" "symlink" ".vimrc"
       
       # Execute
       When call "$DODOT" deploy vim
       
       # Verify
       The status should be success
       verify_symlink "$HOME/.vimrc" "$DOTFILES_ROOT/vim/.vimrc"
     End
   End
   ```

2. Mock brew usage:
   - Default: Uses mock brew that logs calls
   - Special tests: Can use brew-full for real tests
   - Check /tmp/brew-calls.log for verification

3. Error injection helpers:
   ```zsh
   inject_read_only_error() {
     chmod 444 "$1"
     trap "chmod 644 '$1'" EXIT
   }
   ```

4. Debugging:
   - Set DEBUG_TESTS=1 for verbose output
   - Check $HOME/.local/state/dodot/dodot.log
   - Use dump_environment_state() on failures