DODOT LIVE SYSTEM TEST PLAN V2
=dd=============================

TEST ORGANIZATION PRINCIPLE
---------------------------
Tests are organized in 5 suites progressing from simple to complex:
1. Single handlers (foundation)
2. Multiple handlers, single packs (pack integration)
3. Multiple handlers, multiple packs (cross-pack integration)
4. Single handlers, edge cases (isolated edge cases)
5. Multi packs/handlers edge cases (complex interactions)

SUITE 1: SINGLE POWER-UPS
-------------------------
Purpose: Validate minimal dodot features + assertion library
Pattern: Each handler gets YES and NO assertion tests

1.1 Symlink Handler
- Test: symlink deployed successfully
- Test: symlink NOT deployed (verify absence)

1.2 Shell Profile Handler  
- Test: profile sourced in init.sh
- Test: profile NOT sourced (verify absence)

1.3 Path Handler
- Test: bin directory deployed and accessible
- Test: bin directory NOT deployed (verify absence)

1.4 Install Script Handler
- Test: install script executed (marker created)
- Test: install script NOT executed (verify absence)

1.5 Homebrew Handler
- Test: Brewfile processed (sentinel exists)
- Test: Brewfile NOT processed (verify absence)

1.6 Template Handler
- Test: template processed and variables expanded
- Test: template NOT processed (verify absence)

SUITE 2: MULTIPLE POWER-UPS, SINGLE PACKS
------------------------------------------
Purpose: Test handler interactions within single packs
Pattern: Various combinations with YES/NO assertions

2.1 Deploy-type Handlers Combined
- Test: symlink + shell in one pack (both deployed)
- Test: symlink + shell NOT deployed (verify absence)

2.2 Install-type Handlers Combined  
- Test: install + homebrew in one pack (both executed)
- Test: install + homebrew NOT executed (verify absence)

2.3 Mixed Deploy/Install Handlers
- Test: symlink + install in one pack (correct separation)
- Test: path + homebrew in one pack (correct execution)

2.4 All Handlers in One Pack
- Test: pack with all 6 handler types (all work correctly)
- Test: verify selective deployment vs installation

SUITE 3: MULTIPLE POWER-UPS, MULTIPLE PACKS
--------------------------------------------
Purpose: Test cross-pack interactions
Pattern: Multiple packs with various handler combinations

3.1 Simple Multi-pack Deploy
- Test: 3 packs, each with symlinks (all deployed)
- Test: verify pack isolation (changes to one don't affect others)

3.2 Mixed Multi-pack Deploy/Install
- Test: pack A (deploy), pack B (install), pack C (both)
- Test: verify correct command behavior per pack

3.3 Overlapping Shell Profiles
- Test: multiple packs with profile.sh files (all sourced)
- Test: verify init.sh contains all entries

3.4 Multiple Path Deployments
- Test: multiple packs with bin directories
- Test: verify all paths accessible

SUITE 4: SINGLE POWER-UPS, EDGE CASES
--------------------------------------
Purpose: Test edge cases for each handler in isolation

4.1 Symlink Edge Cases
- Test: symlink to missing source file
- Test: symlink when target exists
- Test: symlink with deep directory structure
- Test: symlink with special characters in name

4.2 Shell Profile Edge Cases
- Test: empty profile.sh file
- Test: profile.sh with syntax errors
- Test: profile.sh with special characters

4.3 Path Edge Cases
- Test: empty bin directory
- Test: bin with non-executable files
- Test: bin with subdirectories

4.4 Install Script Edge Cases
- Test: install.sh that fails (exit 1)
- Test: install.sh with long runtime
- Test: install.sh that modifies pack files

4.5 Homebrew Edge Cases
- Test: empty Brewfile
- Test: Brewfile with invalid entries
- Test: Brewfile with comments only

4.6 Template Edge Cases
- Test: template with missing variables
- Test: template with invalid syntax
- Test: nested template references

SUITE 5: MULTI PACKS/POWER-UPS EDGE CASES
------------------------------------------
Purpose: Test complex interactions and conflicts

5.1 File Conflicts
- Test: two packs trying to symlink same target
- Test: template output conflicts with symlink target
- Test: multiple packs with same executable names

5.2 Dependency Order
- Test: pack A depends on pack B installation
- Test: circular dependencies handling
- Test: install order verification

5.3 State Corruption
- Test: partial deployment recovery
- Test: interrupted installation handling
- Test: cleanup after failures

5.4 Permission Issues
- Test: read-only source files
- Test: write-protected target directories
- Test: mixed ownership scenarios

5.5 Large Scale
- Test: 10+ packs with mixed handlers
- Test: performance with many files
- Test: rollback capabilities

CURRENT STATUS vs TARGET
------------------------

Currently Implemented:
- Partial Suite 1 (isolated-* scenarios) - 5 handlers tested (YES only)
- Test framework validation (test-framework scenario)
- Mixed integration tests (basic scenario) - not well organized

Needed Implementation:
- Suite 1: Add NO tests for all handlers
- Suite 1: Add template handler tests
- Suite 2: All tests need implementation
- Suite 3: All tests need implementation  
- Suite 4: All tests need implementation
- Suite 5: All tests need implementation

Migration Path:
1. Reorganize existing isolated-* tests into Suite 1
2. Add missing NO tests to Suite 1
3. Fix known issues (install artifacts, template expansion)
4. Implement Suite 2 (single pack combinations)
5. Implement Suite 3 (multi-pack scenarios)
6. Implement Suite 4 (edge cases per handler)
7. Implement Suite 5 (complex edge cases)
