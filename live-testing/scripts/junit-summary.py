#!/usr/bin/env python3
"""
Process JUnit XML output from Bats and display suite-based summary.

This script parses JUnit XML files generated by Bats and groups test results
by suite (based on directory structure). It provides a human-readable summary
with colored output showing test status and suite-level statistics.

Usage:
    junit-summary.py <junit.xml>
    bats --formatter junit tests/**/*.bats | junit-summary.py -

Example:
    bats --formatter junit live-testing/**/*.bats > results.xml
    junit-summary.py results.xml

The script groups tests by suite name (extracted from the test file path)
and displays each suite's tests with pass/fail status, followed by a summary.
"""
import sys
import xml.etree.ElementTree as ET
from collections import defaultdict
from pathlib import Path


class Colors:
    """ANSI color codes for terminal output."""
    GREEN = '\033[92m'
    RED = '\033[91m'
    YELLOW = '\033[93m'
    BOLD = '\033[1m'
    RESET = '\033[0m'


def print_success(message):
    """Print a success message in green."""
    print(f"{Colors.GREEN}{message}{Colors.RESET}")


def print_error(message):
    """Print an error message in red."""
    print(f"{Colors.RED}{message}{Colors.RESET}")


def print_warning(message):
    """Print a warning message in yellow."""
    print(f"{Colors.YELLOW}{message}{Colors.RESET}")


def print_bold(message):
    """Print a message in bold."""
    print(f"{Colors.BOLD}{message}{Colors.RESET}")


def extract_suite_name(file_path):
    """
    Extract suite name from test file path.
    
    Examples:
        live-testing/scenarios/suite-1-single-powerups/path/tests/path.bats -> suite-1-single-powerups
        /workspace/live-testing/scenarios/suite-2/tests/test.bats -> suite-2
    """
    parts = Path(file_path).parts
    if 'scenarios' in parts:
        idx = parts.index('scenarios')
        if idx + 1 < len(parts):
            return parts[idx + 1]
    # Fallback: use the parent directory of 'tests' if found
    if 'tests' in parts:
        idx = parts.index('tests')
        if idx > 0:
            return parts[idx - 1]
    # Last resort: use filename without extension
    return Path(file_path).stem


def parse_junit_xml(xml_source):
    """
    Parse JUnit XML and group results by suite.
    
    Args:
        xml_source: File path or file-like object containing JUnit XML
        
    Returns:
        Dictionary mapping suite names to test results
    """
    tree = ET.parse(xml_source)
    root = tree.getroot()
    
    suites = defaultdict(lambda: {
        'tests': 0,
        'failures': 0,
        'errors': 0,
        'skipped': 0,
        'test_cases': []
    })
    
    # Process each test suite in the XML
    for testsuite in root.findall('.//testsuite'):
        suite_file = testsuite.get('name', 'unknown')
        suite_name = extract_suite_name(suite_file)
        
        suite = suites[suite_name]
        suite['tests'] += int(testsuite.get('tests', 0))
        suite['failures'] += int(testsuite.get('failures', 0))
        suite['errors'] += int(testsuite.get('errors', 0))
        suite['skipped'] += int(testsuite.get('skipped', 0))
        
        # Collect individual test cases
        for testcase in testsuite.findall('.//testcase'):
            name = testcase.get('name', 'unknown')
            status = 'pass'
            
            # Determine test status
            if testcase.find('failure') is not None:
                status = 'fail'
            elif testcase.find('error') is not None:
                status = 'error'
            elif testcase.find('skipped') is not None:
                status = 'skip'
            
            suite['test_cases'].append({
                'name': name,
                'status': status
            })
    
    return suites


def print_results(suites):
    """
    Print formatted results with suite grouping and summary.
    
    Args:
        suites: Dictionary mapping suite names to test results
        
    Returns:
        Exit code (0 for success, 1 for failures)
    """
    # Status symbols for different test outcomes
    status_symbols = {
        'pass': f"{Colors.GREEN}✓{Colors.RESET}",
        'fail': f"{Colors.RED}✗{Colors.RESET}",
        'error': f"{Colors.RED}✗{Colors.RESET}",
        'skip': f"{Colors.YELLOW}○{Colors.RESET}"
    }
    
    # Print results for each suite
    for suite_name, data in sorted(suites.items()):
        print()
        print_bold(suite_name)
        
        # Print individual test cases
        for test in data['test_cases']:
            symbol = status_symbols[test['status']]
            print(f"  {symbol} {test['name']}")
    
    # Print summary section
    print()
    print_bold("Summary:")
    
    total_suites = len(suites)
    failed_suites = sum(1 for s in suites.values() if s['failures'] > 0 or s['errors'] > 0)
    
    # Print per-suite summary
    for suite_name, data in sorted(suites.items()):
        failed = data['failures'] + data['errors']
        total = data['tests']
        
        if failed > 0:
            print(f"  {suite_name}: ", end="")
            print_error(f"{failed} failed tests out of {total}")
        else:
            print(f"  {suite_name}: ", end="")
            print_success(f"all {total} tests passed")
    
    # Overall summary
    print()
    print_bold("Overall: ")
    if failed_suites == 0:
        print_success(f"All {total_suites} suites passed!")
        return 0
    else:
        print_error(f"{failed_suites} out of {total_suites} suites have failures")
        return 1


def main():
    """Main entry point."""
    if len(sys.argv) != 2:
        print("Usage: junit-summary.py <junit.xml>")
        print("       junit-summary.py - (to read from stdin)")
        sys.exit(1)
    
    try:
        # Handle stdin input
        if sys.argv[1] == '-':
            suites = parse_junit_xml(sys.stdin)
        else:
            with open(sys.argv[1], 'r') as f:
                suites = parse_junit_xml(f)
        
        exit_code = print_results(suites)
        sys.exit(exit_code)
        
    except FileNotFoundError:
        print_error(f"Error: File '{sys.argv[1]}' not found")
        sys.exit(1)
    except ET.ParseError as e:
        print_error(f"Error parsing XML: {e}")
        sys.exit(1)
    except Exception as e:
        print_error(f"Unexpected error: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()